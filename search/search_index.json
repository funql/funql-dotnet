{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#complex-queries-made-simple","title":"Complex queries made simple","text":"<p>FunQL .NET is the official .NET implementation of FunQL, the open-source Functional Query Language. It provides a simple way to add powerful query capabilities to existing REST APIs or build standalone FunQL APIs.</p> <p>With FunQL .NET, you can:</p> <ul> <li>Enhance existing REST APIs with ready-to-use components for filtering, sorting, pagination, and more.</li> <li>Build standalone FunQL APIs that harness the full power of the FunQL Query Language.</li> <li>Integrate with LINQ and EF Core to transform FunQL queries into efficient database queries.</li> </ul> <p>FunQL .NET is designed to be lightweight, efficient, and easy to integrate, giving developers full control over API behavior without unnecessary complexity. We continuously improve FunQL .NET to support new use cases and enhance developer experience.</p> <p>Let's get started with FunQL .NET!</p> <p>Get started Learn more</p>"},{"location":"design-philosophy/","title":"FunQL .NET design philosophy","text":"<p>Before you start using FunQL .NET, it's helpful to understand the design principles behind it. Our goal is to provide developers with the right tools to build powerful, flexible APIs in a way that's both intuitive and easy to use.</p> <p>To learn more about FunQL, visit funql.io.</p>"},{"location":"design-philosophy/#everything-you-would-expect","title":"Everything you would expect","text":"<p>FunQL .NET is designed with simplicity and efficiency in mind. We focus on providing the core functionalities that are essential to most API workflows while ensuring a smooth and seamless developer experience.</p> <ul> <li> <p> It just works</p> <p>FunQL .NET processes raw text into functional queries, handling lexical analysis, tokenization, syntax parsing, and Abstract Syntax Tree (AST) generation so you don't have to.</p> </li> <li> <p> Supports LINQ and EF Core</p> <p>Translates FunQL queries into LINQ expressions for seamless database interaction with EF Core.</p> </li> <li> <p> Zero dependencies</p> <p>Requires only .NET Core; no additional frameworks or external libraries needed.</p> </li> <li> <p> Built-in validation</p> <p>Enforces query parameter constraints, ensuring valid API queries.</p> </li> </ul>"},{"location":"design-philosophy/#built-for-developers-by-developers","title":"Built for developers, by developers","text":"<p>FunQL .NET is built with developers in mind. We believe in keeping things transparent, customizable, and flexible. It's designed to be simple, yet adaptable to meet the unique needs of any project.</p> <ul> <li> <p> Explicit by default</p> <p>No hidden behaviors or 'automagic' configurations. FunQL .NET enforces explicit schema definitions, giving developers full control and clarity over API behavior.</p> </li> <li> <p> Highly extensible</p> <p>Every component is customizable: override, extend, or replace parts to fit your project's needs.</p> </li> <li> <p> Configurable JSON serialization</p> <p>Works out of the box with <code>System.Text.Json</code> and supports external JSON libraries like <code>NewtonSoft.Json</code> for greater flexibility.</p> </li> <li> <p> Easy integration</p> <p>Install via NuGet for a seamless setup.</p> </li> </ul>"},{"location":"licensing/","title":"Licensing","text":"<p>FunQL .NET is available under two licensing options: the GPLv2 license for open-source use and a Commercial license for proprietary, closed-source use.</p> <p>Each option is designed to meet different needs. Visit funql.io to find out which license is right for your project.</p> <p>Learn more</p>"},{"location":"learn/getting-started/","title":"Getting started","text":"<p>In this guide, we will walk you through the basics of installing FunQL .NET.</p>"},{"location":"learn/getting-started/#installation","title":"Installation","text":"<p>FunQL .NET is available as a NuGet package and can be easily installed using the .NET CLI. If you are not familiar with the .NET CLI, we recommend using the NuGet Package Manager.</p>"},{"location":"learn/getting-started/#nuget-packages","title":"NuGet packages","text":"Package Latest version About <code>FunQL</code> Includes both <code>FunQL.Core</code> and <code>FunQL.Linq</code> for quick setup. <code>FunQL.Core</code> Provides the core functionality, including parsing, validating, and executing requests. <code>FunQL.Linq</code> Translates FunQL queries into LINQ expressions."},{"location":"learn/getting-started/#with-dotnet-cli","title":"with .NET CLI recommended","text":"<p>To add the <code>FunQL</code> package to your project, run the following command in your terminal from your project directory:</p> <pre><code>dotnet add package FunQL\n</code></pre> <p>Note</p> <p>This command will install both <code>FunQL.Core</code> and <code>FunQL.Linq</code>, providing all the essential components to get you started quickly.</p>"},{"location":"learn/getting-started/#with-nuget","title":"with NuGet","text":"<p>To install the <code>FunQL</code> package in Visual Studio, follow these steps:</p> <ol> <li>Select Project &gt; Manage NuGet Packages.</li> <li>In the NuGet Package Manager page, choose nuget.org as the Package source.</li> <li>From the Browse tab, search for FunQL, select FunQL in the list, and then select Install.</li> <li>If you are prompted to verify the installation, select OK.</li> </ol> <p>After installation, the <code>FunQL</code> package will be added to your project's dependencies.</p>"}]}